/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package graph.my_interface;

import com.google.common.graph.GraphBuilder;
import com.google.common.graph.MutableGraph;
import com.mxgraph.layout.mxCircleLayout;
import com.mxgraph.layout.mxOrganicLayout;
import com.mxgraph.model.mxCell;
import com.mxgraph.swing.handler.mxGraphTransferHandler;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.swing.mxGraphComponent.mxGraphControl;
import com.mxgraph.util.*;
import com.mxgraph.view.mxGraph;
import com.mxgraph.view.mxGraphSelectionModel;
import com.mxgraph.view.mxStylesheet;
import graph.algorithm.CreatorGraphs;
import org.jgrapht.Graph;
import org.jgrapht.ext.JGraphXAdapter;
import org.jgrapht.graph.SimpleGraph;
import org.jgrapht.graph.guava.MutableGraphAdapter;
import org.jgrapht.nio.dot.DOTExporter;
import org.jgrapht.nio.dot.DOTImporter;
import org.jgrapht.util.SupplierUtil;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.*;
import java.util.logging.Logger;

import static graph.algorithm.Checker.isStronglyRegularGraph;

/**
 * @author david
 */
public class GraphInterface extends javax.swing.JFrame {

    //<editor-fold desc="Блок переменных">
    private static final Logger logger = Logger.getLogger(GraphInterface.class.getName());
    private final Hashtable<String, Object> style = new Hashtable<>();
    private final Hashtable<String, Object> style2 = new Hashtable<>();
    private ArrayList<Object> myPeaks = new ArrayList<>();
    private ArrayList<JToggleButton> ToggleButtons = new ArrayList<>();
    private ArrayList<JComponent> majorPanels = new ArrayList<>();
    private ArrayList<JComboBox> comboBoxes = new ArrayList<>();

    private HashMap<String, mxGraph> Graphs = new HashMap<>();
    private HashMap<String, mxGraphComponent> GraphsComponents = new HashMap<>();
    private HashMap<String, JTable> GraphsTables = new HashMap<>();

    private Object v1 = null;
    private Object v2 = null;
    private Integer couter = 0;
    private Integer counterID = 1;

    private Color chooseColorPeak = Color.RED;
    private Color chooseColorRib = Color.BLACK;

    private Double AnchorPointX;
    private Double AnchorPointY;
    private mxCell anchorCell;

    private String localNameGraph;
    private String NameGraphPos;
    private ArrayList<String> namesGraph = new ArrayList<>();
    private Object edgeNames;
    private Object vertexNames;

    private List<String> graphEdgesStr = new LinkedList<>();
    private List<String> graphVerticesStr = new LinkedList<>();
    private ArrayList<ArrayList<Integer>> tableDate = new ArrayList<>();
    //</editor-fold>

    /**
     * Creates new form GraphInterface
     */
    public GraphInterface() {

        initComponents();
        initArraysLists();
        setPanelEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    /**
     * Инициализирует все графические компоненты интерфейса
     * */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        CompareDialog = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        CompareBtn = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        graphsList1 = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        graphsList2 = new javax.swing.JList<>();
        processDialog = new javax.swing.JDialog();
        jPanel6 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        messageLabel = new javax.swing.JLabel();
        MainPanel = new javax.swing.JPanel();
        MainTabbedPane = new javax.swing.JTabbedPane();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        peakDiameterSpin = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        chooseColorPeaks = new javax.swing.JButton();
        applySettingsBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        selectedColorPeaks = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        chooseColorRibs = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        selectedColorRibs = new javax.swing.JLabel();
        applySettingsBtn2 = new javax.swing.JButton();
        jInternalFrame4 = new javax.swing.JInternalFrame();
        jPanel10 = new javax.swing.JPanel();
        workPanel0 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        addPeakButton = new javax.swing.JToggleButton();
        addRibButton = new javax.swing.JToggleButton();
        removeButton = new javax.swing.JToggleButton();
        dragButton = new javax.swing.JToggleButton();
        editableBtn = new javax.swing.JToggleButton();
        resizableBtn = new javax.swing.JToggleButton();
        graphicComBox = new javax.swing.JComboBox<>();
        stretchButton1 = new javax.swing.JButton();
        stretchButton2 = new javax.swing.JButton();
        stretchButton3 = new javax.swing.JButton();
        stretchButton4 = new javax.swing.JButton();
        gridSizeSpinner = new javax.swing.JSpinner();
        zoomMore = new javax.swing.JButton();
        zoomLess = new javax.swing.JButton();
        selectGraph = new javax.swing.JButton();
        setAnchorPointBtn = new javax.swing.JToggleButton();
        coordAnchorPoint = new javax.swing.JLabel();
        clearGraphBtn = new javax.swing.JButton();
        brightnessBtn = new javax.swing.JToggleButton();
        standardСolorBtn = new javax.swing.JButton();
        hideLabelsBtn = new javax.swing.JToggleButton();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        graphComBox2 = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        RefreshBtn = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jInternalFrame3 = new javax.swing.JInternalFrame();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jInternalFrame5 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        jInternalFrame6 = new javax.swing.JInternalFrame();
        jPanel11 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        UpdateBtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        graphComBox1 = new javax.swing.JComboBox<>();
        adjMatRadBtn = new javax.swing.JRadioButton();
        IncMatRadBtn = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        createBtn = new javax.swing.JButton();
        addVertexes = new javax.swing.JButton();
        addRibs = new javax.swing.JButton();
        questionBtn = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        createMFI = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newGraph = new javax.swing.JMenuItem();
        openBtn = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveBtn = new javax.swing.JMenuItem();
        saveAsBtn = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        expImBtn = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        exitBtn = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        propertiesMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        stronglyRegularly = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        ViewMenu = new javax.swing.JMenu();
        HelpMenu = new javax.swing.JMenu();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("graph/my_interface/Bundle"); // NOI18N
        jDialog1.setTitle(bundle.getString("GraphInterface.jDialog1.title")); // NOI18N
        jDialog1.setMinimumSize(new java.awt.Dimension(535, 400));
        jDialog1.setModal(true);
        jDialog1.setName("jDialog1"); // NOI18N
        jDialog1.setResizable(false);
        jDialog1.setLocationRelativeTo(this);

        jPanel2.setMinimumSize(new java.awt.Dimension(520, 350));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(520, 380));

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/часть1.jpg"))); // NOI18N
        jLabel19.setText(bundle.getString("GraphInterface.jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/часть2.jpg"))); // NOI18N
        jLabel7.setText(bundle.getString("GraphInterface.jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/часть3.jpg"))); // NOI18N
        jLabel14.setText(bundle.getString("GraphInterface.jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/часть4.jpg"))); // NOI18N
        jLabel15.setText(bundle.getString("GraphInterface.jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        jLabel16.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        jLabel16.setText(bundle.getString("GraphInterface.jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N

        jLabel17.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        jLabel17.setText(bundle.getString("GraphInterface.jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N

        jLabel18.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        jLabel18.setText(bundle.getString("GraphInterface.jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        jLabel21.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        jLabel21.setText(bundle.getString("GraphInterface.jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N

        jLabel20.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        jLabel20.setText(bundle.getString("GraphInterface.jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel16))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel19))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel17))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15))))
                        .addGap(0, 29, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)))
                .addGap(18, 18, 18)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText(bundle.getString("GraphInterface.jRadioButtonMenuItem1.text")); // NOI18N
        jRadioButtonMenuItem1.setName("jRadioButtonMenuItem1"); // NOI18N

        jMenuItem2.setText(bundle.getString("GraphInterface.jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N

        CompareDialog.setTitle(bundle.getString("GraphInterface.CompareDialog.title")); // NOI18N
        CompareDialog.setMinimumSize(new java.awt.Dimension(400, 250));
        CompareDialog.setModal(true);
        CompareDialog.setName("CompareDialog"); // NOI18N
        CompareDialog.setResizable(false);
        CompareDialog.setLocationRelativeTo(this);

        jPanel3.setMaximumSize(new java.awt.Dimension(400, 250));
        jPanel3.setMinimumSize(new java.awt.Dimension(400, 250));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 250));

        CompareBtn.setText(bundle.getString("GraphInterface.CompareBtn.text")); // NOI18N
        CompareBtn.setName("CompareBtn"); // NOI18N
        CompareBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompareBtnActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel32.setText(bundle.getString("GraphInterface.jLabel32.text")); // NOI18N
        jLabel32.setName("jLabel32"); // NOI18N

        jLabel33.setText(bundle.getString("GraphInterface.jLabel33.text")); // NOI18N
        jLabel33.setName("jLabel33"); // NOI18N

        jLabel34.setText(bundle.getString("GraphInterface.jLabel34.text")); // NOI18N
        jLabel34.setName("jLabel34"); // NOI18N

        jScrollPane7.setMaximumSize(new java.awt.Dimension(85, 140));
        jScrollPane7.setMinimumSize(new java.awt.Dimension(85, 140));
        jScrollPane7.setName("jScrollPane7"); // NOI18N
        jScrollPane7.setPreferredSize(new java.awt.Dimension(85, 140));

        graphsList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        graphsList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        graphsList1.setName("graphsList1"); // NOI18N
        jScrollPane7.setViewportView(graphsList1);

        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(85, 140));

        graphsList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        graphsList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        graphsList2.setName("graphsList2"); // NOI18N
        jScrollPane1.setViewportView(graphsList2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jLabel32))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CompareBtn))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jLabel33)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLabel34))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(CompareBtn))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(jLabel34))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout CompareDialogLayout = new javax.swing.GroupLayout(CompareDialog.getContentPane());
        CompareDialog.getContentPane().setLayout(CompareDialogLayout);
        CompareDialogLayout.setHorizontalGroup(
            CompareDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CompareDialogLayout.setVerticalGroup(
            CompareDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        processDialog.setTitle(bundle.getString("GraphInterface.processDialog.title")); // NOI18N
        processDialog.setMinimumSize(new java.awt.Dimension(350, 170));
        processDialog.setName("processDialog"); // NOI18N
        processDialog.setResizable(false);
        processDialog.setLocationRelativeTo(CompareDialog);

        jPanel6.setMaximumSize(new java.awt.Dimension(350, 170));
        jPanel6.setMinimumSize(new java.awt.Dimension(350, 170));
        jPanel6.setName("jPanel6"); // NOI18N
        jPanel6.setPreferredSize(new java.awt.Dimension(350, 170));

        jProgressBar1.setValue(10);
        jProgressBar1.setName("jProgressBar1"); // NOI18N
        jProgressBar1.setOpaque(true);
        jProgressBar1.setPreferredSize(new java.awt.Dimension(220, 20));

        messageLabel.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        messageLabel.setText(bundle.getString("GraphInterface.messageLabel.text")); // NOI18N
        messageLabel.setName("messageLabel"); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(messageLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );

        javax.swing.GroupLayout processDialogLayout = new javax.swing.GroupLayout(processDialog.getContentPane());
        processDialog.getContentPane().setLayout(processDialogLayout);
        processDialogLayout.setHorizontalGroup(
            processDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        processDialogLayout.setVerticalGroup(
            processDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setLocationByPlatform(true);
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(831, 625));
        setResizable(false);

        MainPanel.setName("MainPanel"); // NOI18N

        MainTabbedPane.setToolTipText(bundle.getString("GraphInterface.MainTabbedPane.toolTipText")); // NOI18N
        MainTabbedPane.setName("MainTabbedPane"); // NOI18N

        jDesktopPane1.setBackground(new java.awt.Color(60, 63, 65));
        jDesktopPane1.setName("jDesktopPane1"); // NOI18N

        jInternalFrame1.setTitle(bundle.getString("GraphInterface.jInternalFrame1.title")); // NOI18N
        jInternalFrame1.setName("jInternalFrame1"); // NOI18N
        jInternalFrame1.setPreferredSize(new java.awt.Dimension(195, 260));
        jInternalFrame1.setVisible(true);

        jTabbedPane2.setName("jTabbedPane2"); // NOI18N

        jPanel4.setEnabled(false);
        jPanel4.setName("jPanel4"); // NOI18N

        jLabel1.setText(bundle.getString("GraphInterface.jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        peakDiameterSpin.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        peakDiameterSpin.setName("peakDiameterSpin"); // NOI18N
        peakDiameterSpin.setPreferredSize(new java.awt.Dimension(70, 25));

        jLabel2.setText(bundle.getString("GraphInterface.jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        chooseColorPeaks.setText(bundle.getString("GraphInterface.chooseColorPeaks.text")); // NOI18N
        chooseColorPeaks.setName("chooseColorPeaks"); // NOI18N
        chooseColorPeaks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseColorPeaksActionPerformed(evt);
            }
        });

        applySettingsBtn.setText(bundle.getString("GraphInterface.applySettingsBtn.text")); // NOI18N
        applySettingsBtn.setName("applySettingsBtn"); // NOI18N
        applySettingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applySettingsBtnActionPerformed(evt);
            }
        });

        jLabel3.setText(bundle.getString("GraphInterface.jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        selectedColorPeaks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selectedColorPeaks.setToolTipText(bundle.getString("GraphInterface.selectedColorPeaks.toolTipText")); // NOI18N
        selectedColorPeaks.setName("selectedColorPeaks"); // NOI18N
        selectedColorPeaks.setOpaque(true);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(applySettingsBtn))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(peakDiameterSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chooseColorPeaks))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectedColorPeaks, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 35, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(peakDiameterSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseColorPeaks))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedColorPeaks, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(applySettingsBtn)
                .addContainerGap())
        );

        jTabbedPane2.addTab(bundle.getString("GraphInterface.jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        jPanel5.setName("jPanel5"); // NOI18N

        jLabel4.setText(bundle.getString("GraphInterface.jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        chooseColorRibs.setText(bundle.getString("GraphInterface.chooseColorRibs.text")); // NOI18N
        chooseColorRibs.setName("chooseColorRibs"); // NOI18N
        chooseColorRibs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseColorRibsActionPerformed(evt);
            }
        });

        jLabel6.setText(bundle.getString("GraphInterface.jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        selectedColorRibs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selectedColorRibs.setToolTipText(bundle.getString("GraphInterface.selectedColorRibs.toolTipText")); // NOI18N
        selectedColorRibs.setName("selectedColorRibs"); // NOI18N
        selectedColorRibs.setOpaque(true);

        applySettingsBtn2.setText(bundle.getString("GraphInterface.applySettingsBtn2.text")); // NOI18N
        applySettingsBtn2.setName("applySettingsBtn2"); // NOI18N
        applySettingsBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applySettingsBtn2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(0, 11, Short.MAX_VALUE)
                                .addComponent(applySettingsBtn2))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(selectedColorRibs, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chooseColorRibs)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseColorRibs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedColorRibs, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(applySettingsBtn2)
                .addContainerGap())
        );

        jTabbedPane2.addTab(bundle.getString("GraphInterface.jPanel5.TabConstraints.tabTitle"), jPanel5); // NOI18N

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        jInternalFrame4.setTitle(bundle.getString("GraphInterface.jInternalFrame4.title")); // NOI18N
        jInternalFrame4.setName("jInternalFrame4"); // NOI18N
        jInternalFrame4.setPreferredSize(new java.awt.Dimension(597, 30));
        jInternalFrame4.setVisible(true);

        jPanel10.setName("jPanel10"); // NOI18N

        workPanel0.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), bundle.getString("GraphInterface.workPanel0.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI Black", 2, 12))); // NOI18N
        workPanel0.setToolTipText(bundle.getString("GraphInterface.workPanel0.toolTipText")); // NOI18N
        workPanel0.setName("workPanel0"); // NOI18N
        workPanel0.setPreferredSize(new java.awt.Dimension(574, 465));
        workPanel0.setLayout(new java.awt.BorderLayout());

        jSeparator3.setName("jSeparator3"); // NOI18N

        addPeakButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-насыщенность-25 (5555555555555).png"))); // NOI18N
        addPeakButton.setToolTipText(bundle.getString("GraphInterface.addPeakButton.toolTipText")); // NOI18N
        addPeakButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addPeakButton.setName("addPeakButton"); // NOI18N
        addPeakButton.setPreferredSize(new java.awt.Dimension(25, 25));
        addPeakButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPeakButtonActionPerformed(evt);
            }
        });

        addRibButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-ментальная-карта-25.png"))); // NOI18N
        addRibButton.setToolTipText(bundle.getString("GraphInterface.addRibButton.toolTipText")); // NOI18N
        addRibButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addRibButton.setName("addRibButton"); // NOI18N
        addRibButton.setPreferredSize(new java.awt.Dimension(25, 25));
        addRibButton.addActionListener(this::addRibButtonActionPerformed);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-отмена-25.png"))); // NOI18N
        removeButton.setToolTipText(bundle.getString("GraphInterface.removeButton.toolTipText")); // NOI18N
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setName("removeButton"); // NOI18N
        removeButton.setPreferredSize(new java.awt.Dimension(25, 25));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        dragButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/корректный.png"))); // NOI18N
        dragButton.setToolTipText(bundle.getString("GraphInterface.dragButton.toolTipText")); // NOI18N
        dragButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dragButton.setName("dragButton"); // NOI18N
        dragButton.setPreferredSize(new java.awt.Dimension(25, 25));
        dragButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dragButtonActionPerformed(evt);
            }
        });

        editableBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-редактировать-узел-25.png"))); // NOI18N
        editableBtn.setToolTipText(bundle.getString("GraphInterface.editableBtn.toolTipText")); // NOI18N
        editableBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editableBtn.setName("editableBtn"); // NOI18N
        editableBtn.setPreferredSize(new java.awt.Dimension(25, 25));
        editableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editableBtnActionPerformed(evt);
            }
        });

        resizableBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-изменить-размер-файла-25.png"))); // NOI18N
        resizableBtn.setToolTipText(bundle.getString("GraphInterface.resizableBtn.toolTipText")); // NOI18N
        resizableBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resizableBtn.setName("resizableBtn"); // NOI18N
        resizableBtn.setPreferredSize(new java.awt.Dimension(25, 25));
        resizableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizableBtnActionPerformed(evt);
            }
        });

        graphicComBox.setToolTipText(bundle.getString("GraphInterface.graphicComBox.toolTipText")); // NOI18N
        graphicComBox.setMaximumSize(new java.awt.Dimension(72, 22));
        graphicComBox.setName("graphicComBox"); // NOI18N
        graphicComBox.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        graphicComBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphicComBoxActionPerformed(evt);
            }
        });

        stretchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-расширить-25.png"))); // NOI18N
        stretchButton1.setEnabled(false);
        stretchButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stretchButton1.setName("stretchButton1"); // NOI18N
        stretchButton1.setPreferredSize(new java.awt.Dimension(25, 25));
        stretchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stretchButton1ActionPerformed(evt);
            }
        });

        stretchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-свернуть-25.png"))); // NOI18N
        stretchButton2.setEnabled(false);
        stretchButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stretchButton2.setName("stretchButton2"); // NOI18N
        stretchButton2.setPreferredSize(new java.awt.Dimension(25, 25));
        stretchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stretchButton2ActionPerformed(evt);
            }
        });

        stretchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-изменение-размера-по-вертикали-25.png"))); // NOI18N
        stretchButton3.setEnabled(false);
        stretchButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stretchButton3.setName("stretchButton3"); // NOI18N
        stretchButton3.setPreferredSize(new java.awt.Dimension(25, 25));
        stretchButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stretchButton3ActionPerformed(evt);
            }
        });

        stretchButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-объединение-по-горизонтали-25.png"))); // NOI18N
        stretchButton4.setEnabled(false);
        stretchButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stretchButton4.setName("stretchButton4"); // NOI18N
        stretchButton4.setPreferredSize(new java.awt.Dimension(25, 25));
        stretchButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stretchButton4ActionPerformed(evt);
            }
        });

        gridSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        gridSizeSpinner.setToolTipText(bundle.getString("GraphInterface.gridSizeSpinner.toolTipText")); // NOI18N
        gridSizeSpinner.setName("gridSizeSpinner"); // NOI18N

        zoomMore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-приблизить-25.png"))); // NOI18N
        zoomMore.setToolTipText(bundle.getString("GraphInterface.zoomMore.toolTipText")); // NOI18N
        zoomMore.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomMore.setName("zoomMore"); // NOI18N
        zoomMore.setPreferredSize(new java.awt.Dimension(25, 25));
        zoomMore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomMoreActionPerformed(evt);
            }
        });

        zoomLess.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        zoomLess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-уменьшить-25.png"))); // NOI18N
        zoomLess.setToolTipText(bundle.getString("GraphInterface.zoomLess.toolTipText")); // NOI18N
        zoomLess.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomLess.setName("zoomLess"); // NOI18N
        zoomLess.setPreferredSize(new java.awt.Dimension(25, 25));
        zoomLess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomLessActionPerformed(evt);
            }
        });

        selectGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-курсор-25.png"))); // NOI18N
        selectGraph.setToolTipText(bundle.getString("GraphInterface.selectGraph.toolTipText")); // NOI18N
        selectGraph.setName("selectGraph"); // NOI18N
        selectGraph.setPreferredSize(new java.awt.Dimension(25, 25));
        selectGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectGraphActionPerformed(evt);
            }
        });

        setAnchorPointBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-точность-25.png"))); // NOI18N
        setAnchorPointBtn.setToolTipText(bundle.getString("GraphInterface.setAnchorPointBtn.toolTipText")); // NOI18N
        setAnchorPointBtn.setName("setAnchorPointBtn"); // NOI18N
        setAnchorPointBtn.setPreferredSize(new java.awt.Dimension(25, 25));
        setAnchorPointBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAnchorPointBtnActionPerformed(evt);
            }
        });

        coordAnchorPoint.setText(bundle.getString("GraphInterface.coordAnchorPoint.text")); // NOI18N
        coordAnchorPoint.setName("coordAnchorPoint"); // NOI18N
        coordAnchorPoint.setPreferredSize(new java.awt.Dimension(37, 20));

        clearGraphBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-удалить-отчет-в-виде-графика-25.png"))); // NOI18N
        clearGraphBtn.setToolTipText(bundle.getString("GraphInterface.clearGraphBtn.toolTipText")); // NOI18N
        clearGraphBtn.setName("clearGraphBtn"); // NOI18N
        clearGraphBtn.setPreferredSize(new java.awt.Dimension(25, 25));
        clearGraphBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearGraphBtnActionPerformed(evt);
            }
        });

        brightnessBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-включить-свет-25.png"))); // NOI18N
        brightnessBtn.setToolTipText(bundle.getString("GraphInterface.brightnessBtn.toolTipText")); // NOI18N
        brightnessBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        brightnessBtn.setName("brightnessBtn"); // NOI18N
        brightnessBtn.setPreferredSize(new java.awt.Dimension(25, 25));
        brightnessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightnessBtnActionPerformed(evt);
            }
        });

        standardСolorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-убрать-инвертирование-цвета-25.png"))); // NOI18N
        standardСolorBtn.setToolTipText(bundle.getString("GraphInterface.standardСolorBtn.toolTipText")); // NOI18N
        standardСolorBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        standardСolorBtn.setName("standardСolorBtn"); // NOI18N
        standardСolorBtn.setPreferredSize(new java.awt.Dimension(25, 25));
        standardСolorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardСolorBtnActionPerformed(evt);
            }
        });

        hideLabelsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/скрыть надписи вершин.png"))); // NOI18N
        hideLabelsBtn.setToolTipText(bundle.getString("GraphInterface.hideLabelsBtn.toolTipText")); // NOI18N
        hideLabelsBtn.setName("hideLabelsBtn"); // NOI18N
        hideLabelsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideLabelsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addPeakButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addRibButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dragButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resizableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearGraphBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(standardСolorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(stretchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stretchButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stretchButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stretchButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(setAnchorPointBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coordAnchorPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hideLabelsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(brightnessBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(graphicComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(zoomLess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(zoomMore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addComponent(workPanel0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(workPanel0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(coordAnchorPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stretchButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stretchButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stretchButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stretchButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(setAnchorPointBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(zoomLess, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(zoomMore, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(gridSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(graphicComBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(brightnessBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hideLabelsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addPeakButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addRibButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dragButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(clearGraphBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(standardСolorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resizableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(editableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jInternalFrame4Layout = new javax.swing.GroupLayout(jInternalFrame4.getContentPane());
        jInternalFrame4.getContentPane().setLayout(jInternalFrame4Layout);
        jInternalFrame4Layout.setHorizontalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 2, Short.MAX_VALUE))
        );
        jInternalFrame4Layout.setVerticalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jInternalFrame2.setTitle(bundle.getString("GraphInterface.jInternalFrame2.title")); // NOI18N
        jInternalFrame2.setName("jInternalFrame2"); // NOI18N
        jInternalFrame2.setPreferredSize(new java.awt.Dimension(195, 290));
        jInternalFrame2.setVisible(true);

        jPanel1.setName("jPanel1"); // NOI18N

        graphComBox2.setName("graphComBox2"); // NOI18N
        graphComBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphComBox2ActionPerformed(evt);
            }
        });

        jLabel22.setText(bundle.getString("GraphInterface.jLabel22.text")); // NOI18N
        jLabel22.setName("jLabel22"); // NOI18N

        RefreshBtn.setText(bundle.getString("GraphInterface.RefreshBtn.text")); // NOI18N
        RefreshBtn.setToolTipText(bundle.getString("GraphInterface.RefreshBtn.toolTipText")); // NOI18N
        RefreshBtn.setName("RefreshBtn"); // NOI18N
        RefreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshBtnActionPerformed(evt);
            }
        });

        jLabel23.setText(bundle.getString("GraphInterface.jLabel23.text")); // NOI18N
        jLabel23.setName("jLabel23"); // NOI18N

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel24.setText(bundle.getString("GraphInterface.jLabel24.text")); // NOI18N
        jLabel24.setName("jLabel24"); // NOI18N

        jLabel25.setText(bundle.getString("GraphInterface.jLabel25.text")); // NOI18N
        jLabel25.setName("jLabel25"); // NOI18N

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel26.setText(bundle.getString("GraphInterface.jLabel26.text")); // NOI18N
        jLabel26.setName("jLabel26"); // NOI18N

        jLabel27.setText(bundle.getString("GraphInterface.jLabel27.text")); // NOI18N
        jLabel27.setName("jLabel27"); // NOI18N

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel28.setText(bundle.getString("GraphInterface.jLabel28.text")); // NOI18N
        jLabel28.setName("jLabel28"); // NOI18N

        jLabel29.setText(bundle.getString("GraphInterface.jLabel29.text")); // NOI18N
        jLabel29.setName("jLabel29"); // NOI18N

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel30.setText(bundle.getString("GraphInterface.jLabel30.text")); // NOI18N
        jLabel30.setName("jLabel30"); // NOI18N

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-децентрализованная-сеть-45.png"))); // NOI18N
        jLabel31.setText(bundle.getString("GraphInterface.jLabel31.text")); // NOI18N
        jLabel31.setFocusable(false);
        jLabel31.setName("jLabel31"); // NOI18N
        jLabel31.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(graphComBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(RefreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(graphComBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RefreshBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDesktopPane1.setLayer(jInternalFrame1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jInternalFrame4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jInternalFrame2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jInternalFrame4, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame4, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jInternalFrame2, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
        );

        MainTabbedPane.addTab(bundle.getString("GraphInterface.jDesktopPane1.TabConstraints.tabTitle"), jDesktopPane1); // NOI18N

        jDesktopPane2.setName("jDesktopPane2"); // NOI18N

        jInternalFrame3.setTitle(bundle.getString("GraphInterface.jInternalFrame3.title")); // NOI18N
        jInternalFrame3.setName("jInternalFrame3"); // NOI18N
        jInternalFrame3.setVisible(true);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), bundle.getString("GraphInterface.jPanel14.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N
        jPanel14.setForeground(new java.awt.Color(187, 187, 188));
        jPanel14.setName("jPanel14"); // NOI18N
        jPanel14.setPreferredSize(new java.awt.Dimension(360, 255));

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), bundle.getString("GraphInterface.jScrollPane5.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N
        jScrollPane5.setName("jScrollPane5"); // NOI18N

        jTextArea4.setColumns(20);
        jTextArea4.setLineWrap(true);
        jTextArea4.setRows(5);
        jTextArea4.setToolTipText(bundle.getString("GraphInterface.jTextArea4.toolTipText")); // NOI18N
        jTextArea4.setWrapStyleWord(true);
        jTextArea4.setName("jTextArea4"); // NOI18N
        jScrollPane5.setViewportView(jTextArea4);

        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), bundle.getString("GraphInterface.jScrollPane6.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N
        jScrollPane6.setName("jScrollPane6"); // NOI18N

        jTextArea5.setColumns(20);
        jTextArea5.setLineWrap(true);
        jTextArea5.setRows(5);
        jTextArea5.setToolTipText(bundle.getString("GraphInterface.jTextArea5.toolTipText")); // NOI18N
        jTextArea5.setWrapStyleWord(true);
        jTextArea5.setName("jTextArea5"); // NOI18N
        jScrollPane6.setViewportView(jTextArea5);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel8.setText(bundle.getString("GraphInterface.jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel8)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jInternalFrame3Layout = new javax.swing.GroupLayout(jInternalFrame3.getContentPane());
        jInternalFrame3.getContentPane().setLayout(jInternalFrame3Layout);
        jInternalFrame3Layout.setHorizontalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jInternalFrame3Layout.setVerticalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jInternalFrame5.setTitle(bundle.getString("GraphInterface.jInternalFrame5.title")); // NOI18N
        jInternalFrame5.setName("jInternalFrame5"); // NOI18N
        jInternalFrame5.setPreferredSize(new java.awt.Dimension(450, 345));
        jInternalFrame5.setVisible(true);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), bundle.getString("GraphInterface.jScrollPane2.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N
        jScrollPane2.setToolTipText(bundle.getString("GraphInterface.jScrollPane2.toolTipText")); // NOI18N
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        myTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        myTable.setName("myTable"); // NOI18N
        jScrollPane2.setViewportView(myTable);

        javax.swing.GroupLayout jInternalFrame5Layout = new javax.swing.GroupLayout(jInternalFrame5.getContentPane());
        jInternalFrame5.getContentPane().setLayout(jInternalFrame5Layout);
        jInternalFrame5Layout.setHorizontalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame5Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jInternalFrame5Layout.setVerticalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
        );

        jInternalFrame6.setResizable(true);
        jInternalFrame6.setTitle(bundle.getString("GraphInterface.jInternalFrame6.title")); // NOI18N
        jInternalFrame6.setName("jInternalFrame6"); // NOI18N
        jInternalFrame6.setPreferredSize(new java.awt.Dimension(818, 190));
        jInternalFrame6.setVisible(true);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), bundle.getString("GraphInterface.jPanel11.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N
        jPanel11.setName("jPanel11"); // NOI18N
        jPanel11.setPreferredSize(new java.awt.Dimension(407, 158));

        jLabel9.setText(bundle.getString("GraphInterface.jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jLabel10.setText(bundle.getString("GraphInterface.jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        UpdateBtn.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        UpdateBtn.setText(bundle.getString("GraphInterface.UpdateBtn.text")); // NOI18N
        UpdateBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        UpdateBtn.setName("UpdateBtn"); // NOI18N
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        jLabel11.setText(bundle.getString("GraphInterface.jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        graphComBox1.setMaximumSize(new java.awt.Dimension(72, 22));
        graphComBox1.setName("graphComBox1"); // NOI18N
        graphComBox1.setPreferredSize(new java.awt.Dimension(85, 22));
        graphComBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphComBox1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(adjMatRadBtn);
        adjMatRadBtn.setSelected(true);
        adjMatRadBtn.setText(bundle.getString("GraphInterface.adjMatRadBtn.text")); // NOI18N
        adjMatRadBtn.setName("adjMatRadBtn"); // NOI18N
        adjMatRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjMatRadBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(IncMatRadBtn);
        IncMatRadBtn.setText(bundle.getString("GraphInterface.IncMatRadBtn.text")); // NOI18N
        IncMatRadBtn.setName("IncMatRadBtn"); // NOI18N
        IncMatRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncMatRadBtnActionPerformed(evt);
            }
        });

        jCheckBox1.setText(bundle.getString("GraphInterface.jCheckBox1.text")); // NOI18N
        jCheckBox1.setToolTipText(bundle.getString("GraphInterface.jCheckBox1.toolTipText")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N

        jLabel12.setText(bundle.getString("GraphInterface.jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        createBtn.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        createBtn.setText(bundle.getString("GraphInterface.createBtn.text")); // NOI18N
        createBtn.setHideActionText(true);
        createBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createBtn.setName("createBtn"); // NOI18N
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        addVertexes.setText(bundle.getString("GraphInterface.addVertexes.text")); // NOI18N
        addVertexes.setName("addVertexes"); // NOI18N
        addVertexes.setPreferredSize(new java.awt.Dimension(85, 22));
        addVertexes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVertexesActionPerformed(evt);
            }
        });

        addRibs.setText(bundle.getString("GraphInterface.addRibs.text")); // NOI18N
        addRibs.setName("addRibs"); // NOI18N
        addRibs.setPreferredSize(new java.awt.Dimension(85, 22));
        addRibs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRibsActionPerformed(evt);
            }
        });

        questionBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-вопрос-25.png"))); // NOI18N
        questionBtn.setText(bundle.getString("GraphInterface.questionBtn.text")); // NOI18N
        questionBtn.setName("questionBtn"); // NOI18N
        questionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(createBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addVertexes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(graphComBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                                .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addRibs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(questionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IncMatRadBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(adjMatRadBtn)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addRibs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(questionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(graphComBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addVertexes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(IncMatRadBtn)
                    .addComponent(adjMatRadBtn))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), bundle.getString("GraphInterface.jPanel15.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N
        jPanel15.setName("jPanel15"); // NOI18N

        jLabel5.setText(bundle.getString("GraphInterface.jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText(bundle.getString("GraphInterface.jRadioButton4.text")); // NOI18N
        jRadioButton4.setToolTipText(bundle.getString("GraphInterface.jRadioButton4.toolTipText")); // NOI18N
        jRadioButton4.setName("jRadioButton4"); // NOI18N

        buttonGroup2.add(jRadioButton7);
        jRadioButton7.setText(bundle.getString("GraphInterface.jRadioButton7.text")); // NOI18N
        jRadioButton7.setToolTipText(bundle.getString("GraphInterface.jRadioButton7.toolTipText")); // NOI18N
        jRadioButton7.setName("jRadioButton7"); // NOI18N

        createMFI.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        createMFI.setText(bundle.getString("GraphInterface.createMFI.text")); // NOI18N
        createMFI.setHideActionText(true);
        createMFI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createMFI.setName("createMFI"); // NOI18N
        createMFI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMFIActionPerformed(evt);
            }
        });

        jLabel13.setText(bundle.getString("GraphInterface.jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        jComboBox3.setToolTipText(bundle.getString("GraphInterface.jComboBox3.toolTipText")); // NOI18N
        jComboBox3.setMaximumSize(new java.awt.Dimension(72, 22));
        jComboBox3.setName("jComboBox3"); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton7)
                        .addGap(18, 18, 18)
                        .addComponent(createMFI))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(153, 153, 153))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton7)
                    .addComponent(createMFI, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jInternalFrame6Layout = new javax.swing.GroupLayout(jInternalFrame6.getContentPane());
        jInternalFrame6.getContentPane().setLayout(jInternalFrame6Layout);
        jInternalFrame6Layout.setHorizontalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame6Layout.createSequentialGroup()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jInternalFrame6Layout.setVerticalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDesktopPane2.setLayer(jInternalFrame3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jInternalFrame5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jInternalFrame6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addComponent(jInternalFrame3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jInternalFrame5, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jInternalFrame6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jInternalFrame3)
                    .addComponent(jInternalFrame5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jInternalFrame6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );

        MainTabbedPane.addTab(bundle.getString("GraphInterface.jDesktopPane2.TabConstraints.tabTitle"), jDesktopPane2); // NOI18N

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane)
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
        );

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        fileMenu.setText(bundle.getString("GraphInterface.fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        newGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/добавить-график-23.png"))); // NOI18N
        newGraph.setText(bundle.getString("GraphInterface.newGraph.text")); // NOI18N
        newGraph.setName("newGraph"); // NOI18N
        newGraph.setPreferredSize(new java.awt.Dimension(116, 20));
        newGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGraphActionPerformed(evt);
            }
        });
        fileMenu.add(newGraph);

        openBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-открыть-папку-22.png"))); // NOI18N
        openBtn.setText(bundle.getString("GraphInterface.openBtn.text")); // NOI18N
        openBtn.setEnabled(false);
        openBtn.setName("openBtn"); // NOI18N
        openBtn.setPreferredSize(new java.awt.Dimension(119, 20));
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });
        fileMenu.add(openBtn);

        jSeparator1.setName("jSeparator1"); // NOI18N
        fileMenu.add(jSeparator1);

        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-сохранить-20.png"))); // NOI18N
        saveBtn.setText(bundle.getString("GraphInterface.saveBtn.text")); // NOI18N
        saveBtn.setEnabled(false);
        saveBtn.setName("saveBtn"); // NOI18N
        saveBtn.setPreferredSize(new java.awt.Dimension(114, 20));
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        fileMenu.add(saveBtn);

        saveAsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-сохранить-20.png"))); // NOI18N
        saveAsBtn.setText(bundle.getString("GraphInterface.saveAsBtn.text")); // NOI18N
        saveAsBtn.setEnabled(false);
        saveAsBtn.setName("saveAsBtn"); // NOI18N
        saveAsBtn.setPreferredSize(new java.awt.Dimension(135, 20));
        saveAsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsBtnActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsBtn);

        jSeparator2.setName("jSeparator2"); // NOI18N
        fileMenu.add(jSeparator2);

        expImBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Экспорт_изображения.png"))); // NOI18N
        expImBtn.setText(bundle.getString("GraphInterface.expImBtn.text")); // NOI18N
        expImBtn.setEnabled(false);
        expImBtn.setName("expImBtn"); // NOI18N
        expImBtn.setPreferredSize(new java.awt.Dimension(125, 22));
        expImBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expImBtnActionPerformed(evt);
            }
        });
        fileMenu.add(expImBtn);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-настройки-22.png"))); // NOI18N
        jMenuItem1.setText(bundle.getString("GraphInterface.jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.setPreferredSize(new java.awt.Dimension(115, 22));
        fileMenu.add(jMenuItem1);

        jSeparator4.setName("jSeparator4"); // NOI18N
        fileMenu.add(jSeparator4);

        exitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-закрыть-окно-22.png"))); // NOI18N
        exitBtn.setText(bundle.getString("GraphInterface.exitBtn.text")); // NOI18N
        exitBtn.setName("exitBtn"); // NOI18N
        exitBtn.setPreferredSize(new java.awt.Dimension(90, 22));
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });
        fileMenu.add(exitBtn);

        jMenuBar1.add(fileMenu);

        jMenu2.setText(bundle.getString("GraphInterface.jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        propertiesMenu.setText(bundle.getString("GraphInterface.propertiesMenu.text")); // NOI18N
        propertiesMenu.setName("propertiesMenu"); // NOI18N

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-сравнить-22.png"))); // NOI18N
        jMenu1.setText(bundle.getString("GraphInterface.jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N
        jMenu1.setPreferredSize(new java.awt.Dimension(145, 22));

        stronglyRegularly.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-строить-отчет-в-виде-графика-22.png"))); // NOI18N
        stronglyRegularly.setText(bundle.getString("GraphInterface.stronglyRegularly.text")); // NOI18N
        stronglyRegularly.setEnabled(false);
        stronglyRegularly.setName("stronglyRegularly"); // NOI18N
        stronglyRegularly.setPreferredSize(new java.awt.Dimension(179, 22));
        stronglyRegularly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stronglyRegularlyActionPerformed(evt);
            }
        });
        jMenu1.add(stronglyRegularly);

        propertiesMenu.add(jMenu1);

        jMenuBar1.add(propertiesMenu);

        jMenu3.setText(bundle.getString("GraphInterface.jMenu3.text")); // NOI18N
        jMenu3.setName("jMenu3"); // NOI18N
        jMenuBar1.add(jMenu3);

        ViewMenu.setText(bundle.getString("GraphInterface.ViewMenu.text")); // NOI18N
        ViewMenu.setName("ViewMenu"); // NOI18N
        jMenuBar1.add(ViewMenu);

        HelpMenu.setText(bundle.getString("GraphInterface.HelpMenu.text")); // NOI18N
        HelpMenu.setName("HelpMenu"); // NOI18N
        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription(bundle.getString("GraphInterface.AccessibleContext.accessibleDescription")); // NOI18N

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold desc="Окно: Главное">

    //<editor-fold desc="Классы событий: клика мыши и выделения вершины">
    /**
     * Класс обрабатывает события мыши
     * */
    class MouseReleasedListener extends MouseAdapter {
        /**
         * метод обработки клика мыши
         * @param e источник события*/
        @Override
        public void mouseReleased(MouseEvent e) {
            super.mouseReleased(e);

            mxGraphControl GraphControl = null;

            try {
                e.getSource();
                GraphControl = (mxGraphControl) e.getSource();
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            mxGraphComponent graphComponent2 = GraphControl.getGraphContainer();
            mxGraph graph2 = graphComponent2.getGraph();


            mxStylesheet stylesheet = graph2.getStylesheet();

            style.put(mxConstants.STYLE_SHAPE, mxConstants.SHAPE_ELLIPSE);
            style.put(mxConstants.STYLE_OPACITY, 100);

            stylesheet.putCellStyle("ROUNDED", style);
            mxPoint mousePos = graphComponent2.getPointForEvent(e, false);

            if (addPeakButton.isSelected()) {
                graph2.getModel().beginUpdate();
                try {
                    graph2.insertVertex(graph2.getDefaultParent(), counterID.toString(), counterID.toString(), mousePos.getX() - 4, mousePos.getY() - 8, 18, 18, "ROUNDED;strokeColor=red;fillColor=red");

                    counterID++;
                } finally {
                    graph2.getModel().endUpdate();
                }
            }
            else if (setAnchorPointBtn.isSelected()) {
                Object box;
                graph2.removeCells(new Object[]{anchorCell});

                AnchorPointY = mousePos.getY();
                AnchorPointX = mousePos.getX();
                coordAnchorPoint.setText("<html>X = " + AnchorPointX + "<br>Y = " + AnchorPointY);
                stretchButton1.setEnabled(true);
                stretchButton2.setEnabled(true);
                stretchButton3.setEnabled(true);
                stretchButton4.setEnabled(true);

                graph2.getModel().beginUpdate();
                try {
                    box = graph2.insertVertex(graph2.getDefaultParent(), null, null, mousePos.getX(), mousePos.getY(), 4, 4, "ROUNDED;strokeColor=blue;fillColor=blue");
                } finally {
                    graph2.getModel().endUpdate();
                }
                anchorCell = (mxCell) box;
                anchorCell.setVisible(false);
            }
            graphComponent2.refresh();
            graph2.refresh();
        }
    }
    /**
     * Класс обрабатывает изминения
     * состояния компонента графа
     * */
    class ChangeEventListener implements mxEventSource.mxIEventListener {
        /**
         * Метод обрабатывает событие изменения компонента
         * @param sender объект изменения
         * @param evt событие изменения*/
        @Override
        public void invoke(Object sender, mxEventObject evt) {
            mxStylesheet stylesheet = Graphs.get(localNameGraph).getStylesheet();

            style2.put(mxConstants.STYLE_ENDARROW, mxConstants.NONE);
            stylesheet.putCellStyle("ROUNDED1", style2);

            mxGraphSelectionModel sm = (mxGraphSelectionModel) sender;
            mxCell cell = (mxCell) sm.getCell();


            if ((cell != null && cell.isVertex()) && addRibButton.isSelected()) {
                if (couter.equals(0)) {
                    v1 = cell;
                    couter++;
                } else if (couter.equals(1)) {
                    v2 = cell;
                    Graphs.get(localNameGraph).getModel().beginUpdate();
                    try {
                        Graphs.get(localNameGraph).insertEdge(Graphs.get(localNameGraph).getDefaultParent(), null, "", v1, v2, "ROUNDED1;strokeColor=black");
                    } finally {
                        Graphs.get(localNameGraph).getModel().endUpdate();
                    }
                    couter = 0;
                }
            }
            else if (cell != null && removeButton.isSelected()) {
                Graphs.get(localNameGraph).getModel().beginUpdate();
                try {
                    Graphs.get(localNameGraph).removeCells(new Object[]{cell});
                } finally {
                    Graphs.get(localNameGraph).getModel().endUpdate();
                }
            }
        }
    }
    //</editor-fold>

    //<editor-fold desc="Кнопки: Добавить вершину, Удалить вершину/ребро, добавить ребро, Разрешить перетаскивание">
    /**
     * Обработчик события клика по кнопке "разрешения перетаскивания"
     * @param evt событие клика*/
    private void dragButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dragButtonActionPerformed
        deactivateUnused(dragButton);
        if (dragButton.isSelected()) {
            Graphs.get(localNameGraph).setCellsSelectable(true);
        } else {
            Graphs.get(localNameGraph).setCellsSelectable(false);
        }
    }//GEN-LAST:event_dragButtonActionPerformed
    /**
     * Обработчик события клика по кнопке "добавления вершины на холст"
     * @param evt событие клика*/
    private void addPeakButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPeakButtonActionPerformed
        deactivateUnused(addPeakButton);
    }//GEN-LAST:event_addPeakButtonActionPerformed
    /**
     * Обработчик события клика по кнопке "соединения вершин ребрами на холсте"
     * @param evt событие клика*/
    private void addRibButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRibButtonActionPerformed
        deactivateUnused(addRibButton);
        if (addRibButton.isSelected()) {
            Graphs.get(localNameGraph).setCellsSelectable(true);
        } else {
            Graphs.get(localNameGraph).setCellsSelectable(false);
        }
    }//GEN-LAST:event_addRibButtonActionPerformed
    /**
     * Обработчик события клика по кнопке "удаления вершины/ребра"
     * @param evt событие клика*/
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        deactivateUnused(removeButton);
        if (removeButton.isSelected()) {
            Graphs.get(localNameGraph).setCellsSelectable(true);
        } else {
            Graphs.get(localNameGraph).setCellsSelectable(false);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    //</editor-fold>

    //<editor-fold desc="Методы растягивания и стягивания графа">

    /**
     * Обработчик события клика по кнопке "растянуть по горизонтали"
     * @param evt событие клика*/
    private void stretchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stretchButton1ActionPerformed
        myPeaks = new ArrayList<>(Arrays.asList(Graphs.get(localNameGraph).getChildCells(Graphs.get(localNameGraph).getDefaultParent())));
        mxCell cell = null;
        for (Object peak : myPeaks) {
            if (peak instanceof mxCell) {
                cell = (mxCell) peak;
                if (cell.isVertex()) {

                    if (cell.getGeometry().getX() > AnchorPointX) {
                        Graphs.get(localNameGraph).getModel().beginUpdate();
                        try {
                            cell.getGeometry().setX(cell.getGeometry().getX() + (Integer) gridSizeSpinner.getValue());
                        } finally {
                            Graphs.get(localNameGraph).getModel().endUpdate();
                        }
                        Graphs.get(localNameGraph).refresh();
                    }

                    if (cell.getGeometry().getX() < AnchorPointX) {
                        Graphs.get(localNameGraph).getModel().beginUpdate();
                        try {
                            cell.getGeometry().setX(cell.getGeometry().getX() - (Integer) gridSizeSpinner.getValue());
                        } finally {
                            Graphs.get(localNameGraph).getModel().endUpdate();
                        }
                        Graphs.get(localNameGraph).refresh();
                    }
                }
            }
        }
    }//GEN-LAST:event_stretchButton1ActionPerformed
    /**
     * Обработчик события клика по кнопке "стянуть по горизонтали"
     * @param evt событие клика*/
    private void stretchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stretchButton2ActionPerformed
        myPeaks = new ArrayList<>(Arrays.asList(Graphs.get(localNameGraph).getChildCells(Graphs.get(localNameGraph).getDefaultParent())));
        mxCell cell = null;
        for (Object peak : myPeaks) {
            if (peak instanceof mxCell) {
                cell = (mxCell) peak;
                if (cell.isVertex()) {

                    if (cell.getGeometry().getX() > AnchorPointX) {
                        Graphs.get(localNameGraph).getModel().beginUpdate();
                        try {
                            cell.getGeometry().setX(cell.getGeometry().getX() - (Integer) gridSizeSpinner.getValue());
                        } finally {
                            Graphs.get(localNameGraph).getModel().endUpdate();
                        }
                        Graphs.get(localNameGraph).refresh();
                    }

                    if (cell.getGeometry().getX() < AnchorPointX) {
                        Graphs.get(localNameGraph).getModel().beginUpdate();
                        try {
                            cell.getGeometry().setX(cell.getGeometry().getX() + (Integer) gridSizeSpinner.getValue());
                        } finally {
                            Graphs.get(localNameGraph).getModel().endUpdate();
                        }
                        Graphs.get(localNameGraph).refresh();
                    }
                }
            }
        }
    }//GEN-LAST:event_stretchButton2ActionPerformed
    /**
     * Обработчик события клика по кнопке "растянуть по вертикали"
     * @param evt событие клика*/
    private void stretchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stretchButton3ActionPerformed
        myPeaks = new ArrayList<>(Arrays.asList(Graphs.get(localNameGraph).getChildCells(Graphs.get(localNameGraph).getDefaultParent())));
        mxCell cell = null;
        for (Object peak : myPeaks) {
            if (peak instanceof mxCell) {
                cell = (mxCell) peak;
                if (cell.isVertex()) {

                    if (cell.getGeometry().getY() > AnchorPointY) {
                        Graphs.get(localNameGraph).getModel().beginUpdate();
                        try {
                            cell.getGeometry().setY(cell.getGeometry().getY() + (Integer) gridSizeSpinner.getValue());
                        } finally {
                            Graphs.get(localNameGraph).getModel().endUpdate();
                        }
                        Graphs.get(localNameGraph).refresh();
                    }

                    if (cell.getGeometry().getY() < AnchorPointY) {
                        Graphs.get(localNameGraph).getModel().beginUpdate();
                        try {
                            cell.getGeometry().setY(cell.getGeometry().getY() - (Integer) gridSizeSpinner.getValue());
                        } finally {
                            Graphs.get(localNameGraph).getModel().endUpdate();
                        }
                        Graphs.get(localNameGraph).refresh();
                    }
                }
            }
        }
    }//GEN-LAST:event_stretchButton3ActionPerformed
    /**
     * Обработчик события клика по кнопке "стянуть по вертикали"
     * @param evt событие клика*/
    private void stretchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stretchButton4ActionPerformed
        myPeaks = new ArrayList<>(Arrays.asList(Graphs.get(localNameGraph).getChildCells(Graphs.get(localNameGraph).getDefaultParent())));
        mxCell cell = null;
        for (Object peak : myPeaks) {
            if (peak instanceof mxCell) {
                cell = (mxCell) peak;
                if (cell.isVertex()) {

                    if (cell.getGeometry().getY() > AnchorPointY) {
                        Graphs.get(localNameGraph).getModel().beginUpdate();
                        try {
                            cell.getGeometry().setY(cell.getGeometry().getY() - (Integer) gridSizeSpinner.getValue());
                        } finally {
                            Graphs.get(localNameGraph).getModel().endUpdate();
                        }
                        Graphs.get(localNameGraph).refresh();
                    }

                    if (cell.getGeometry().getY() < AnchorPointY) {
                        Graphs.get(localNameGraph).getModel().beginUpdate();
                        try {
                            cell.getGeometry().setY(cell.getGeometry().getY() + (Integer) gridSizeSpinner.getValue());
                        } finally {
                            Graphs.get(localNameGraph).getModel().endUpdate();
                        }
                        Graphs.get(localNameGraph).refresh();
                    }
                }
            }
        }
    }//GEN-LAST:event_stretchButton4ActionPerformed

    //</editor-fold>

    //<editor-fold desc="Прочие методы связанные с окном роботы графа">

    /**
     * Обработчик события клика по кнопке "увеличить визуальное представление графа на холсте"
     * @param evt событие клика*/
    private void zoomMoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomMoreActionPerformed
        GraphsComponents.get(localNameGraph).zoomIn();
    }//GEN-LAST:event_zoomMoreActionPerformed
    /**
     * Обработчик события клика по кнопке "уменьшить визуальное представление графа на холсте"
     * @param evt событие клика*/
    private void zoomLessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomLessActionPerformed
        GraphsComponents.get(localNameGraph).zoomOut();
    }//GEN-LAST:event_zoomLessActionPerformed
    /**
     * Обработчик события клика по кнопке "Выделить все вершины графа для перетаскивания всего графа"
     * @param evt событие клика*/
    private void selectGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectGraphActionPerformed
        ArrayList<Object> peaks = new ArrayList<>();
        myPeaks = new ArrayList<>(Arrays.asList(Graphs.get(localNameGraph).getChildCells(Graphs.get(localNameGraph).getDefaultParent())));

        for (Object obj : myPeaks) {
            if (obj instanceof mxCell) {
                mxCell cell = (mxCell) obj;
                if (cell.isVertex()) {
                    peaks.add(cell);
                }
            }
        }

        Graphs.get(localNameGraph).setCellsSelectable(true);
        Graphs.get(localNameGraph).setSelectionCells(peaks);
        Graphs.get(localNameGraph).refresh();
        Graphs.get(localNameGraph).setCellsSelectable(false);
    }//GEN-LAST:event_selectGraphActionPerformed
    /**
     * Обработчик события клика по кнопке "Установить опорную точку
     * для стягивания/растягивания по горизонтали/вертикали вершин графа"
     * @param evt событие клика*/
    private void setAnchorPointBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAnchorPointBtnActionPerformed
        deactivateUnused(setAnchorPointBtn);
        coordAnchorPoint.setText("<html>X = <br>Y = ");
        stretchButton1.setEnabled(false);
        stretchButton2.setEnabled(false);
        stretchButton3.setEnabled(false);
        stretchButton4.setEnabled(false);
        Graphs.get(localNameGraph).removeCells(new Object[]{anchorCell});
    }//GEN-LAST:event_setAnchorPointBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Очистить холст"
     * @param evt событие клика*/
    private void clearGraphBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearGraphBtnActionPerformed
        Integer choice = JOptionPane.showConfirmDialog(this, "Вы уверенны, что хотите удалить весь граф?", "Удаление графа", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (choice.equals(JOptionPane.YES_OPTION)) {
            Graphs.get(localNameGraph).getModel().beginUpdate();
            try {
                Graphs.get(localNameGraph).removeCells(Graphs.get(localNameGraph).getChildVertices(Graphs.get(localNameGraph).getDefaultParent()));
            } finally {
                Graphs.get(localNameGraph).getModel().endUpdate();
            }
        }
    }//GEN-LAST:event_clearGraphBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Разрешить редактировать размеры вершин прямо на холсте"
     * @param evt событие клика*/
    private void resizableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizableBtnActionPerformed
        if (resizableBtn.isSelected()) {
            Graphs.get(localNameGraph).setCellsSelectable(true);
            Graphs.get(localNameGraph).setCellsResizable(true);
        } else {
            Graphs.get(localNameGraph).setCellsSelectable(false);
            Graphs.get(localNameGraph).setCellsResizable(false);
        }
    }//GEN-LAST:event_resizableBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Разрешить редактировать надписи вершин и рёбер"
     * @param evt событие клика*/
    private void editableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editableBtnActionPerformed
        if (editableBtn.isSelected()) {
            Graphs.get(localNameGraph).setCellsEditable(true);
        } else {
            Graphs.get(localNameGraph).setCellsEditable(false);
        }
    }//GEN-LAST:event_editableBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Сменить цвет заднего фона холста"
     * @param evt событие клика*/
    private void brightnessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightnessBtnActionPerformed
        if (brightnessBtn.isSelected()) {
            GraphsComponents.get(localNameGraph).getViewport().setOpaque(true);
            GraphsComponents.get(localNameGraph).getViewport().setBackground(new Color(242, 244, 244));
        } else {
            GraphsComponents.get(localNameGraph).getViewport().setOpaque(true);
            GraphsComponents.get(localNameGraph).getViewport().setBackground(new Color(58, 58, 58));
        }
    }//GEN-LAST:event_brightnessBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Привести цветовые хар-ки к стандартному состоянию"
     * @param evt событие клика*/
    private void standardСolorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardСolorBtnActionPerformed
        Object[] arrObj = Graphs.get(localNameGraph).getChildCells(Graphs.get(localNameGraph).getDefaultParent());
        for (Object obj : arrObj) {
            if (obj instanceof mxCell) {
                mxCell cell = (mxCell) obj;
                if (cell.isVertex()) {
                    Graphs.get(localNameGraph).setCellStyles(mxConstants.STYLE_STROKECOLOR, "red", new Object[]{cell});
                    Graphs.get(localNameGraph).setCellStyles(mxConstants.STYLE_FILLCOLOR, "red", new Object[]{cell});

                    cell.getGeometry().setHeight(18.0);
                    cell.getGeometry().setWidth(18.0);
                }
                if (cell.isEdge()) {
                    Graphs.get(localNameGraph).setCellStyles(mxConstants.STYLE_STROKECOLOR, "black", new Object[]{cell});
                }
            }
        }
        Graphs.get(localNameGraph).refresh();
        GraphsComponents.get(localNameGraph).refresh();
    }//GEN-LAST:event_standardСolorBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Скрыть надписи вершин и рёбер"
     * @param evt событие клика*/
    private void hideLabelsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideLabelsBtnActionPerformed
        if (hideLabelsBtn.isSelected()) {
            Graphs.get(localNameGraph).setLabelsVisible(false);
        } else {
            Graphs.get(localNameGraph).setLabelsVisible(true);
        }
        Graphs.get(localNameGraph).refresh();
    }//GEN-LAST:event_hideLabelsBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Выбрать новый цвет вершин"
     * @param evt событие клика*/
    private void chooseColorPeaksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseColorPeaksActionPerformed
        chooseColorPeak = JColorChooser.showDialog(this, "Выберете цвет", Color.RED);
        selectedColorPeaks.setBackground(chooseColorPeak);
    }//GEN-LAST:event_chooseColorPeaksActionPerformed
    /**
     * Обработчик события клика по кнопке "Выбрать новый цвет рёбер"
     * @param evt событие клика*/
    private void chooseColorRibsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseColorRibsActionPerformed
        chooseColorRib = JColorChooser.showDialog(this, "Выберете цвет", Color.BLACK);
        selectedColorRibs.setBackground(chooseColorRib);
    }//GEN-LAST:event_chooseColorRibsActionPerformed

    //</editor-fold>

    //<editor-fold desc="Изменить цвет и размер графа">

    /**
     * Обработчик события клика по кнопке "Применить новые настройки внешнего вида графа"
     * @param evt событие клика*/
    private void applySettingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applySettingsBtnActionPerformed
        installNewSettings();
    }//GEN-LAST:event_applySettingsBtnActionPerformed
    /**
     * Метод инициализации новых настроек внешнего вида графа*/
    private void installNewSettings() {
        Object[] arrObj = Graphs.get(localNameGraph).getChildCells(Graphs.get(localNameGraph).getDefaultParent());
        for (Object obj : arrObj) {
            if (obj instanceof mxCell) {
                mxCell cell = (mxCell) obj;
                if (cell.isVertex()) {
                    Graphs.get(localNameGraph).setCellStyles(mxConstants.STYLE_STROKECOLOR, getHexColor(chooseColorPeak), new Object[]{cell});
                    Graphs.get(localNameGraph).setCellStyles(mxConstants.STYLE_FILLCOLOR, getHexColor(chooseColorPeak), new Object[]{cell});
                    Double newSize = 18.0;
                    try {
                        newSize = Double.valueOf((int) peakDiameterSpin.getModel().getValue());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (!newSize.equals(0.0)) {
                        cell.getGeometry().setHeight(newSize);
                        cell.getGeometry().setWidth(newSize);
                    }
                }
                if (cell.isEdge()) {
                    Graphs.get(localNameGraph).setCellStyles(mxConstants.STYLE_STROKECOLOR, getHexColor(chooseColorRib), new Object[]{cell});
                }
            }
        }
        Graphs.get(localNameGraph).refresh();
        GraphsComponents.get(localNameGraph).refresh();
    }
    /**
     * Обработчик события клика по кнопке "Применить новые настройки внешнего вида графа"
     * @param evt событие клика*/
    private void applySettingsBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applySettingsBtn2ActionPerformed
        installNewSettings();
    }//GEN-LAST:event_applySettingsBtn2ActionPerformed
    //</editor-fold>

    //</editor-fold>

    //<editor-fold desc="Методы - не обработчики событий">
    /**
     * Метод инициализации новых настроек внешнего вида графа*/
    private void initArraysLists() {
        ToggleButtons.add(addPeakButton);
        ToggleButtons.add(addRibButton);
        ToggleButtons.add(removeButton);
        ToggleButtons.add(dragButton);
        ToggleButtons.add(setAnchorPointBtn);

        majorPanels.add(jScrollPane2);
        majorPanels.add(jScrollPane5);
        majorPanels.add(jScrollPane6);
        majorPanels.add(jTabbedPane2);
        majorPanels.add(jPanel1);

        majorPanels.add(jPanel4);
        majorPanels.add(jPanel4);
        majorPanels.add(jPanel5);
        majorPanels.add(jPanel10);
        majorPanels.add(jPanel14);
        majorPanels.add(jPanel11);
        majorPanels.add(jPanel15);

        comboBoxes.add(graphComBox1);
        comboBoxes.add(jComboBox3);
        comboBoxes.add(graphicComBox);
        comboBoxes.add(graphComBox2);
    }
    /**
     * Метод отключает не используемые кнопки графического редактора графа
     * @param buttonUsed используемая кнопка сейчас*/
    private void deactivateUnused(JToggleButton buttonUsed) {
        for (JToggleButton myBtn : ToggleButtons) {
            if (!myBtn.equals(buttonUsed)) {
                myBtn.setSelected(false);
            }
        }
    }
    /**
     * Метод устанавливает новое положение графа на рабочем холсте
     * @param graph Объект графа
     * @param graphComponent Объект компонента, представляющий граф*/
    private void newGeometry(mxGraph graph, mxGraphComponent graphComponent) {
        mxCell cell = null;
        myPeaks = new ArrayList<>(Arrays.asList(graph.getChildCells(graph.getDefaultParent())));

        Double centerXPanel = graphComponent.getPreferredSize().getWidth() / 2;
        Double centerYPanel = graphComponent.getPreferredSize().getHeight() / 2;

        Double graphX = graph.getGraphBounds().getCenterX();
        Double graphY = graph.getGraphBounds().getCenterY();

        Double offsetX = centerXPanel - graphX;
        Double offsetY = centerYPanel - graphY;

        for (Object peak : myPeaks) {
            if (peak instanceof mxCell) {
                cell = (mxCell) peak;
                if (cell.isVertex()) {
                    graph.getModel().beginUpdate();
                    try {
                        cell.getGeometry().setX((cell.getGeometry().getX() + offsetX));
                        cell.getGeometry().setY((cell.getGeometry().getY() + offsetY));
                    } finally {
                        graph.getModel().endUpdate();
                    }
                }
            }
        }
        logger.info("Установка новой геометрии графа на рабочем холсте");
        graph.refresh();
        graphComponent.updateComponents();
    }
    /**
     * Метод отключает/включает все главные панели и содержащиеся в них графические компоненты
     * @param isEnabled указывает, включать или выключать*/
    private void setPanelEnabled(Boolean isEnabled) {
        for (JComponent panel : majorPanels) {

            Component[] components = panel.getComponents();

            for (Component component : components) {
                component.setEnabled(isEnabled);
            }
            panel.setEnabled(isEnabled);
        }
    }
    /**
     * Метод вычисляет количество вершин графа
     * находящихся в момент вызова на рабочем холсте
     * @param graph Объект графа
     * @return Возвращает количество вершин графа*/
    private Integer getNumberPeaks(mxGraph graph) {
        Integer counter = 0;
        Object[] arrObj = graph.getChildCells(graph.getDefaultParent());
        for (Object obj : arrObj) {
            if (obj instanceof mxCell) {
                mxCell cell = (mxCell) obj;
                if (cell.isVertex()) {
                    counter++;
                }
            }
        }
        return counter;
    }
    /**
     * Метод преобразовывает коды цвета RGB в шестнадцатеричное представление
     * @param myColor Объект цвета RGB
     * @return Возвращает строку, которая представляет
     * собой шестнадцатеричное представление цвета RGB*/
    private String getHexColor(Color myColor) {
        Integer R = myColor.getRed();
        Integer G = myColor.getGreen();
        Integer B = myColor.getBlue();
        return String.format("#%02x%02x%02x", R, G, B);
    }
    /**
     * Метод инициализирует созданную таблицу
     * @param table Объект таблицы
     * @param name Имя таблицы в карте таблиц графов
     * @return Возвращает инициализированный объект таблицы*/
    private JTable initTable(JTable table, String name) {
        table.setModel(new DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
        ));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setName(name);
        return table;
    }
    /**
     * Метод добавляет созданный граф в карту графов и инициализирует этот граф
     * @param model модель таблицы графа*/
    private void addAndInitNewGraph(DefaultTableModel model){
        Character ch;
        List<String> Vertices = new LinkedList<>();
        for (int i = 1; i < model.getColumnCount(); i++) {
            Vertices.add(model.getColumnName(i));
        }
        String NameGraph = (String) graphComBox1.getSelectedItem();
        ch = model.getValueAt(0, 0).toString().charAt(0);
        CreatorGraphs.Source mySource = null;

        CreatorGraphs creator = new CreatorGraphs.
                Builder().
                matrix(tableDate).
                graphVertices(Vertices).
                build();


        if (Character.isLetter(ch)){
            mySource = CreatorGraphs.Source.FROM_INCIDENCE_MATRIX;
        } else {
            mySource = CreatorGraphs.Source.FROM_CONTIGUITY_MATRIX;
        }

        logger.info("Запись на место старого JGraph (пустого) на новый из матрицы");
        Graphs.put(NameGraph, creator.getJGraph(creator.getGraphGUAVA(mySource)));
        mxGraph box = Graphs.get(NameGraph);
        GraphsComponents.put(NameGraph, new mxGraphComponent(box));
        logger.info("Создание JGraph, mxGraphComponent и JTable");

        initSettingsGraph(Graphs.get(NameGraph), GraphsComponents.get(NameGraph));

        localNameGraph = NameGraph;
        graphicComBox.setSelectedItem(NameGraph);

        GraphsComponents.get(NameGraph).refresh();
        Graphs.get(NameGraph).refresh();
    }
    /**
     * Метод инициализирует созданный граф базовыми свойствами
     * @param graph Объект графа
     * @param graphComponent Объект компонента, представляющий граф*/
    private void initSettingsGraph(mxGraph graph, mxGraphComponent graphComponent) {
        graph.setCellsSelectable(false);
        graph.setCellsResizable(false);
        graph.setCellsEditable(false);
        graphComponent.setConnectable(false);

        graphComponent.getViewport().setOpaque(true);
        graphComponent.getViewport().setBackground(new Color(242, 244, 244));

        graph.getSelectionModel().addListener(mxEvent.CHANGE, new ChangeEventListener());

        graphComponent.getGraphControl().addMouseListener(new MouseReleasedListener());

        graphComponent.setCenterZoom(true);

        mxCircleLayout layout1 = new mxCircleLayout(graph);
        layout1.execute(graph.getDefaultParent());

        mxOrganicLayout layout = new mxOrganicLayout(graph);
        layout.execute(graph.getDefaultParent());

        workPanel0.removeAll();
        workPanel0.add(graphComponent, BorderLayout.CENTER);
        logger.info("Инициализация нового графа и вывод его на рабочий холст");
        newGeometry(graph, graphComponent);
    }

    //</editor-fold>

    //<editor-fold desc="Окно: Данные и анализ">

    //<editor-fold desc="Выбор типа матрици связей графа">

    /**
     * Обработчик события клика по радиокнопки "Матрица смежности"
     * @param evt событие клика*/
    private void adjMatRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjMatRadBtnActionPerformed
        addRibs.setEnabled(false);
        addVertexes.setEnabled(true);
        if (graphVerticesStr.size() == 0) {
            UpdateBtn.setEnabled(false);
        }
        else{
            UpdateBtn.setEnabled(true);
        }
    }//GEN-LAST:event_adjMatRadBtnActionPerformed

    /**
     * Обработчик события клика по радиокнопки "Матрица инцидентности"
     *
     * @param evt событие клика
     */
    private void IncMatRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncMatRadBtnActionPerformed

        addVertexes.setEnabled(true);
        addRibs.setEnabled(true);
        if (graphVerticesStr.size() == 0 || graphEdgesStr.size() == 0) {
            UpdateBtn.setEnabled(false);
        } else {
            UpdateBtn.setEnabled(true);
        }
    }//GEN-LAST:event_IncMatRadBtnActionPerformed

    //</editor-fold>

    //<editor-fold desc="Добавить список вершин/рёбер">

    /**
     * Обработчик события клика по кнопке "Добавления списка рёбер"
     * @param evt событие клика*/
    private void addRibsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRibsActionPerformed
        edgeNames = JOptionPane.showInputDialog(this,
                "Введите список ребер",
                "Добавить ребра", JOptionPane.PLAIN_MESSAGE,
                new javax.swing.ImageIcon(this.getClass().getResource("/график-100.png")), null,
                "a, b, ... , n"
        );
        if (edgeNames != null){
            if (!edgeNames.toString().matches("(\\D+, )(\\D+, )+\\D+")){
                JOptionPane.showMessageDialog(this,
                        "<html>Извините, но введенный вами<br>список ребер не соответствует<br>требуемому формату: a, b, ... , n",
                        "Ошибка ввода",
                        JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
            }
            else{
                graphEdgesStr = new LinkedList<>(Arrays.asList(edgeNames.toString().split(", ")));
            }
        }
        if (graphVerticesStr.size() != 0 && graphEdgesStr.size() != 0) {
            UpdateBtn.setEnabled(true);
        }
    }//GEN-LAST:event_addRibsActionPerformed

    /**
     * Обработчик события клика по кнопке "Добавления списка вершин"
     * @param evt событие клика*/
    private void addVertexesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVertexesActionPerformed
        vertexNames = JOptionPane.showInputDialog(this,
                "Введите список вершин",
                "Добавить вершины", JOptionPane.PLAIN_MESSAGE,
                new javax.swing.ImageIcon(this.getClass().getResource("/график-100.png")), null,
                "1, 2, ... , n");
        if (vertexNames != null){
            if (!vertexNames.toString().matches("(\\d+, )(\\d+, )+\\d+")){
                JOptionPane.showMessageDialog(this,
                        "<html>Извините, но введенный вами<br>список вершин не соответствует<br>требуемому формату: 1, 2, ... , n",
                        "Ошибка ввода",
                        JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));

            }
            else {
                graphVerticesStr = new LinkedList<>(Arrays.asList(vertexNames.toString().split(", ")));
            }
        }

        if (IncMatRadBtn.isSelected()) {
            if (graphVerticesStr.size() != 0 && graphEdgesStr.size() != 0) {
                UpdateBtn.setEnabled(true);
            }
        }
        else {
            if (graphVerticesStr.size() != 0) {
                UpdateBtn.setEnabled(true);
            }
        }
    }//GEN-LAST:event_addVertexesActionPerformed

    //</editor-fold>

    //<editor-fold desc="Создать граф по матрице и обновить матрицу">
    /**
     * Обработчик события клика по кнопке "Обновить таблицу"
     * @param evt событие клика*/
    private void UpdateBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        String NameGraph = (String) graphComBox1.getSelectedItem();
        Character ch;
        myTable = GraphsTables.get(NameGraph);
        jScrollPane2.setViewportView(myTable);

        myTable.getTableHeader().removeAll();

        //<editor-fold desc="Классы настройки внешнего вида табл.">
        class MyDefaultTableModel extends DefaultTableModel{

            ArrayList<Boolean> canEdit = new ArrayList<>();
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit.get(columnIndex);
            }
        }

        class ColumnColorRenderer extends DefaultTableCellRenderer {
            Color backgroundColor, foregroundColor;
            public ColumnColorRenderer(Color backgroundColor, Color foregroundColor) {
                super();
                this.backgroundColor = backgroundColor;
                this.foregroundColor = foregroundColor;
            }
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,   boolean hasFocus, int row, int column) {
                Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                cell.setBackground(backgroundColor);
                cell.setForeground(foregroundColor);
                ((DefaultTableCellRenderer)cell).setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
                return cell;
            }
        }

        class ColumnColorRenderer1 extends DefaultTableCellRenderer{
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                ((DefaultTableCellRenderer)cell).setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
                return cell;
            }
        }

        class HeaderRenderer implements TableCellRenderer {

            DefaultTableCellRenderer renderer;

            public HeaderRenderer(JTable table) {
                renderer = (DefaultTableCellRenderer)
                        table.getTableHeader().getDefaultRenderer();
                renderer.setHorizontalAlignment(JLabel.CENTER);
            }

            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected,
                    boolean hasFocus, int row, int col) {
                Component cell = renderer.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, col);

                return cell;
            }
        }
        //</editor-fold>


        MyDefaultTableModel model = new MyDefaultTableModel();

        model.canEdit.add(false);

        for (int i = 0; i < graphVerticesStr.size(); i++) {
            model.canEdit.add(true);
        }

        if (adjMatRadBtn.isSelected()) {
            graphVerticesStr.add(0,"Вершины");
        }
        else {
            graphVerticesStr.add(0,"Реб/Вер");
        }

        for (int i = 0; i < graphVerticesStr.size(); i++) {
            model.addColumn(graphVerticesStr.get(i));
        }

        graphVerticesStr.remove(0);

        if (adjMatRadBtn.isSelected()) {
            Object[] cells = new Object[graphVerticesStr.size()];
            for (int j = 0; j < graphVerticesStr.size(); j++) {
                for (int i = 0; i < graphVerticesStr.size(); i++) {
                    if (i == 0){
                        cells[i] = graphVerticesStr.get(j);
                    }
                    else {
                        cells[i] = "";
                    }
                }
                model.addRow(cells);
            }
        }
        else {
            Object[] cells = new Object[graphEdgesStr.size()];
            for (int j = 0; j < graphEdgesStr.size(); j++) {
                for (int i = 0; i < graphEdgesStr.size(); i++) {
                    if (i == 0){
                        cells[i] = graphEdgesStr.get(j);
                    }
                    else {
                        cells[i] = "";
                    }
                }
                model.addRow(cells);
            }
        }

        myTable.setModel(model);

        myTable.getColumnModel().getColumn(0).setCellRenderer(new ColumnColorRenderer(new Color(217, 219, 225), new Color(0, 0, 0)));
        //myTable.getTableHeader().
        for (int i = 1; i < graphVerticesStr.size() + 1; i++) {
            myTable.getColumnModel().getColumn(i).setCellRenderer(new ColumnColorRenderer1());
        }

        if (!(myTable.getTableHeader().getDefaultRenderer() instanceof HeaderRenderer)) {
            myTable.getTableHeader().setDefaultRenderer(new HeaderRenderer(myTable));
        }

        myTable.setGridColor(new Color(0, 0, 0));
        myTable.setShowGrid(true);

        myTable.getTableHeader().setReorderingAllowed(false);
        myTable.setCellSelectionEnabled(true);

        for (int i = 0; i < graphVerticesStr.size(); i++) {
            for (int j = 1; j < graphVerticesStr.size() + 1; j++) {
                model.setValueAt("", i, j);
            }
        }

        ch = myTable.getModel().getValueAt(0, 0).toString().charAt(0);

        if (Character.isLetter(ch)){
            myTable.setToolTipText("<html>Матрица инцидентности.<br>В строке не должно содержаться<br>более двух записей");
        }
        else{
            myTable.setToolTipText("<html>Матрица смежности.<br>В диагонали матрицы не должно<br>содержаться более двух записей");
        }

        //<editor-fold desc="Установка панели управления таблицей в дефолтное состояние">
        if (IncMatRadBtn.isSelected()) {
            addVertexes.setEnabled(true);
            addRibs.setEnabled(true);
        } else {
            addRibs.setEnabled(false);
            addVertexes.setEnabled(true);
        }

        UpdateBtn.setEnabled(false);
        createBtn.setEnabled(true);

        graphEdgesStr.clear();
        graphVerticesStr.clear();
        //</editor-fold>


    }//GEN-LAST:event_UpdateBtnActionPerformed

    /**
     * Обработчик события клика по кнопке "Создать граф из матрицы смежности/инцидентности"
     * @param evt событие клика*/
    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        String NameGraph = (String) graphComBox1.getSelectedItem();

        int length;
        DefaultTableModel model = (DefaultTableModel) GraphsTables.get(NameGraph).getModel();

        tableDate.clear();
        if (adjMatRadBtn.isSelected()) {
            logger.info("Заполнение tableDate из <таблицы смежности>");
            for (int row = 0; row < model.getRowCount(); row++) {
                tableDate.add(new ArrayList<>());
                for (int column = 1; column < model.getColumnCount(); column++) {
                    length = model.getValueAt(row, column).toString().length();
                    if (length == 0) {
                        tableDate.get(row).add(0);
                    } else {
                        tableDate.get(row).add(1);
                    }
                }
                System.out.println(tableDate.get(row));
            }

            Integer counterRibs = 0;

            for (int i = 0; i < tableDate.size(); i++) {
                for (int j = 0; j < tableDate.get(i).size(); j++) {
                    if (tableDate.get(i).get(j).equals(1)){
                        counterRibs++;
                    }
                }
            }

            if (counterRibs <= 50 && model.getColumnCount() <= 20){
                addAndInitNewGraph(model);
            }
        }
        else if(IncMatRadBtn.isSelected()) {
            logger.info("Заполнение tableDate из <таблицы инцидентности>");
            for (int row = 0; row < model.getRowCount(); row++) {
                tableDate.add(new ArrayList<>());
                for (int column = 1; column < model.getColumnCount(); column++) {
                    length = model.getValueAt(row, column).toString().length();
                    if (length == 0) {
                        tableDate.get(row).add(0);
                    }
                    else {
                        tableDate.get(row).add(1);
                    }
                }
                System.out.println(tableDate.get(row));
            }

            if (model.getRowCount() <= 50 && model.getColumnCount() <= 20){
                addAndInitNewGraph(model);
            }
        }

    }//GEN-LAST:event_createBtnActionPerformed
    //</editor-fold>

    /**
     * Обработчик события клика по кнопке "Как это работает"
     * @param evt событие клика*/
    private void questionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionBtnActionPerformed
        jDialog1.setVisible(true);
    }//GEN-LAST:event_questionBtnActionPerformed

    /**
     * Обработчик события смены графа в выпадающем списке
     * @param evt событие клика*/
    private void graphComBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphComBox1ActionPerformed
        Character ch = 0;
        String NameGraph = (String) graphComBox1.getSelectedItem();
        JTable table = (GraphsTables.get(NameGraph));

        if (table.getModel().getColumnCount() > 0) {
            try {
                ch = table.getModel().getValueAt(0, 0).toString().charAt(0);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }

            if (Character.isLetter(ch) && !(ch.equals(0))) {
                IncMatRadBtn.setSelected(true);
                addRibs.setEnabled(true);
                addVertexes.setEnabled(true);

            }
            else {
                adjMatRadBtn.setSelected(true);
                addRibs.setEnabled(false);
                addVertexes.setEnabled(true);
            }
            createBtn.setEnabled(true);
        }
        else {
            createBtn.setEnabled(false);
        }

        jScrollPane2.setViewportView(table);
    }//GEN-LAST:event_graphComBox1ActionPerformed
    /**
     * Обработчик события клика по кнопке "Создать граф из MFI"
     * @param evt событие клика*/
    private void createMFIActionPerformed(ActionEvent evt) {//GEN-FIRST:event_createMFIActionPerformed
        String strG = jTextArea4.getText();
        String strP = jTextArea5.getText();
        сreateMFI(strG, strP);

    }//GEN-LAST:event_createMFIActionPerformed

    protected int сreateMFI(String strG, String strP) {
        Integer[] G = new Integer[0];
        Integer[] P = new Integer[0];

        if (!strG.matches("(\\d+, )(\\d+, )+\\d+")) {
            JOptionPane.showMessageDialog(this,
                    "<html>Извините, но введенный вами<br>список смежности не соответствует<br>требуемому формату: 1, 2, ... , n",
                    "Ошибка ввода",
                    JOptionPane.PLAIN_MESSAGE, new ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
            return -1;
        }
        else {
            String[] strArrayG = strG.split(", ");
            G = new Integer[strArrayG.length];
            for (int i = 0; i < strArrayG.length; i++) {
                G[i] = Integer.parseInt(strArrayG[i]);
            }
        }

        if (!strP.matches("(\\d+, )(\\d+, )+\\d+")) {
            JOptionPane.showMessageDialog(this,
                    "<html>Извините, но введенный вами<br>список индексов не соответствует<br>требуемому формату: 1, 2, ... , n",
                    "Ошибка ввода",
                    JOptionPane.PLAIN_MESSAGE, new ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
            return -1;
        }
        else {
            String[] strArrayP = strP.split(", ");
            P = new Integer[strArrayP.length];
            for (int i = 0; i < strArrayP.length; i++) {
                P[i] = Integer.parseInt(strArrayP[i]);
            }
        }

        for (int i = 0; i < P.length; i++) {
            if (P[i] > G.length){
                return -1;
            }
        }

        CreatorGraphs creator = new CreatorGraphs.Builder().G(G).P(P).build();

        Graphs.put(NameGraphPos, creator.getJGraph(creator.getGraphGUAVA(CreatorGraphs.Source.FROM_MFI)));
        mxGraph box = Graphs.get(NameGraphPos);
        GraphsComponents.put(NameGraphPos, new mxGraphComponent(box));
        logger.info("Создание JGraph, mxGraphComponent и JTable");

        initSettingsGraph(Graphs.get(NameGraphPos), GraphsComponents.get(NameGraphPos));

        localNameGraph = NameGraphPos;
        graphicComBox.setSelectedItem(NameGraphPos);

        GraphsComponents.get(NameGraphPos).refresh();
        Graphs.get(NameGraphPos).refresh();

        jTextArea4.setText("");
        jTextArea5.setText("");
        return 1;
    }

    /**
     * Обработчик события клика по кнопке "Обновить данные окна [О графе]"
     * @param evt событие клика*/
    private void RefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshBtnActionPerformed
        String name = graphComBox2.getSelectedItem().toString();
        CreatorGraphs creator = new CreatorGraphs.Builder().graph(Graphs.get(name)).build();
        MutableGraph<String> guavaGraph = creator.getGraphGUAVA(CreatorGraphs.Source.FROM_GRAPHICAL_VIEW);
        Integer maxDegree = 0;
        Integer minDegree = 0;

        HashSet<String> nodes = new HashSet();
        nodes.addAll(guavaGraph.nodes());

        for (String peak : nodes) {
            if (guavaGraph.degree(peak) > maxDegree){
                maxDegree = guavaGraph.degree(peak);
                minDegree = guavaGraph.degree(peak);
            }
        }

        for (String peak : nodes) {
            if (guavaGraph.degree(peak) < minDegree){
                minDegree = guavaGraph.degree(peak);
            }
        }

        jLabel24.setText(guavaGraph.nodes().size() + "");
        jLabel26.setText(guavaGraph.edges().size() + "");
        jLabel28.setText(maxDegree.toString());
        jLabel30.setText(minDegree.toString());

    }//GEN-LAST:event_RefreshBtnActionPerformed
    /**
     * Обработчик события смены графа в выпадающем списке
     * @param evt событие клика*/
    private void graphComBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphComBox2ActionPerformed
        String name = graphComBox2.getSelectedItem().toString();
        CreatorGraphs creator = new CreatorGraphs.Builder().graph(Graphs.get(name)).build();
        MutableGraph<String> guavaGraph = creator.getGraphGUAVA(CreatorGraphs.Source.FROM_GRAPHICAL_VIEW);
        Integer maxDegree = 0;
        Integer minDegree = 0;

        HashSet<String> nodes = new HashSet();
        nodes.addAll(guavaGraph.nodes());

        for (String peak : nodes) {
            if (guavaGraph.degree(peak) > maxDegree){
                maxDegree = guavaGraph.degree(peak);
                minDegree = guavaGraph.degree(peak);
            }
            if (guavaGraph.degree(peak) < minDegree){
                minDegree = guavaGraph.degree(peak);
            }
        }

        jLabel24.setText(guavaGraph.nodes().size() + "");
        jLabel26.setText(guavaGraph.edges().size() + "");
        jLabel28.setText(maxDegree.toString());
        jLabel30.setText(minDegree.toString());
    }//GEN-LAST:event_graphComBox2ActionPerformed
    /**
     * Обработчик события клика по кнопке "Сравнить графы"
     * @param evt событие клика*/
    private void CompareBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompareBtnActionPerformed
        CreatorGraphs creator;
        String nameGraph1 = graphsList1.getSelectedValue();
        String nameGraph2 = graphsList2.getSelectedValue();
        String result = "Не равны!";
        if (graphsList1.getSelectedValue() != null && graphsList2.getSelectedValue() != null) {

            creator = new CreatorGraphs.Builder().graph(Graphs.get(nameGraph1)).build();
            MutableGraph<String> Graph1 = creator.getGraphGUAVA(CreatorGraphs.Source.FROM_GRAPHICAL_VIEW);

            creator = new CreatorGraphs.Builder().graph(Graphs.get(nameGraph2)).build();
            MutableGraph<String> Graph2 = creator.getGraphGUAVA(CreatorGraphs.Source.FROM_GRAPHICAL_VIEW);

            if (isStronglyRegularGraph(Graph1) && isStronglyRegularGraph(Graph2)){
                result = "Равны!";
            }
            String box = "<html>Графы [" + nameGraph1 + "] и [" + nameGraph2 + "]<br>по результату сравнения: " + result;
            JOptionPane.showMessageDialog(this, box, "Результат сравнения", JOptionPane.PLAIN_MESSAGE, new ImageIcon(this.getClass().getResource("/icons8-подтверждение-оплаты-100.png")));
        }
        else {
            JOptionPane.showMessageDialog(this, "<html>Извините, но для сравнения<br>необходимо выбрать два графа!", "Некорректный выбор", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
        }
    }//GEN-LAST:event_CompareBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Открыть окно сравнения графов"
     * @param evt событие клика*/
    private void stronglyRegularlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stronglyRegularlyActionPerformed
        Object[] arrObj = Graphs.get(graphicComBox.getSelectedItem()).getChildCells(Graphs.get(graphicComBox.getSelectedItem()).getDefaultParent());
        if (arrObj.length != 0) {
            CompareDialog.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(this, "<html>Извините, но холст пуст.<br>Добавьте хотя бы одну вершину!", "Пустой холст", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
        }
    }//GEN-LAST:event_stronglyRegularlyActionPerformed
    /**
     * Обработчик события клика по кнопке "Завершить работу программы"
     * @param evt событие клика*/
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Экспортировать изображения"
     * @param evt событие клика*/
    private void expImBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expImBtnActionPerformed
        int userSelection;
        ImageIcon myImageGraph;
        Object nameGraph = graphicComBox.getSelectedItem();
        File imageFile = new File(nameGraph + ".png");
        JFileChooser file = new JFileChooser();
        file.setSelectedFile(imageFile);

        mxGraphTransferHandler transHandler = new mxGraphTransferHandler();
        mxGraph graph = Graphs.get(nameGraph.toString());
        mxGraphComponent graphComponent = GraphsComponents.get(nameGraph.toString());

        if (graph.getChildCells(graph.getDefaultParent()).length != 0) {
            myImageGraph = transHandler.createTransferableImage(graphComponent, graph.getChildCells(graph.getDefaultParent()));
            BufferedImage bimage = new BufferedImage(
                myImageGraph.getImage().getWidth(null) + 50,
                myImageGraph.getImage().getHeight(null) + 50,
                BufferedImage.TYPE_INT_ARGB
            );

            Graphics2D bGr = bimage.createGraphics();
            bGr.drawImage(myImageGraph.getImage(), 0, 0, null);
            bGr.dispose();

            userSelection = file.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                imageFile = file.getSelectedFile();
                try {
                    ImageIO.write(bimage, "PNG", imageFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "<html>Извините, но холст пуст.<br>Добавьте хотя бы одну вершину!", "Пустой холст", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
        }
    }//GEN-LAST:event_expImBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Сохранить как..."
     * @param evt событие клика*/
    private void saveAsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsBtnActionPerformed
        Object Name = graphicComBox.getSelectedItem();
        CreatorGraphs creator = new CreatorGraphs.Builder().graph(Graphs.get(Name.toString())).build();

        MutableGraphAdapter<String> jgrapht = new MutableGraphAdapter<>(creator.getGraphGUAVA(CreatorGraphs.Source.FROM_GRAPHICAL_VIEW));

        DOTExporter exporter = new DOTExporter();

        JFileChooser file = new JFileChooser();
        File defaultFile = new File(Name + ".txt");
        file.setSelectedFile(defaultFile);

        if (Graphs.get(Name.toString()).getChildCells(Graphs.get(Name.toString()).getDefaultParent()).length != 0) {
            int userSelection = file.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                defaultFile = file.getSelectedFile();
                exporter.exportGraph(jgrapht, defaultFile);
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "<html>Извините, но холст пуст.<br>Добавьте хотя бы одну вершину!", "Пустой холст", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
        }
    }//GEN-LAST:event_saveAsBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Сохранить..."
     * @param evt событие клика*/
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        Object Name = graphicComBox.getSelectedItem();

        File myFile = new File("C:\\Users\\david\\OneDrive\\Документы\\graph_" + Name + "_end.txt");

        CreatorGraphs creator = new CreatorGraphs.Builder().graph(Graphs.get(Name.toString())).build();
        MutableGraphAdapter<String> jgrapht = new MutableGraphAdapter<>(creator.getGraphGUAVA(CreatorGraphs.Source.FROM_GRAPHICAL_VIEW));
        DOTExporter exporter = new DOTExporter();

        if (Graphs.get(Name.toString()).getChildCells(Graphs.get(Name.toString()).getDefaultParent()).length != 0) {
            exporter.exportGraph(jgrapht, myFile);
        }
        else {
            JOptionPane.showMessageDialog(this, "<html>Извините, но холст пуст.<br>Добавьте хотя бы одну вершину!", "Пустой холст", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
        }
    }//GEN-LAST:event_saveBtnActionPerformed
    /**
     * Обработчик события клика по кнопке "Открыть..."
     * @param evt событие клика*/
    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        Object Name = graphicComBox.getSelectedItem();
        JFileChooser file = new JFileChooser();
        Graph<String, String> jgrapht = new SimpleGraph(SupplierUtil.createStringSupplier(1), SupplierUtil.createStringSupplier(1), false);

        int userSelection = file.showOpenDialog(this);
        DOTImporter importer = new DOTImporter();

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToOpen = file.getSelectedFile();
            if (Graphs.get(Name.toString()).getChildCells(Graphs.get(Name.toString()).getDefaultParent()).length == 0){

                try {
                    importer.importGraph(jgrapht, fileToOpen);

                    JGraphXAdapter adapter = new JGraphXAdapter(jgrapht);
                    mxGraph graph = new mxGraph(adapter.getModel());

                    CreatorGraphs creator = new CreatorGraphs.Builder().graph(graph).build();

                    NameGraphPos = Name.toString();
                    Graphs.put(NameGraphPos, creator.getJGraph(creator.getGraphGUAVA(CreatorGraphs.Source.FROM_GRAPHICAL_VIEW)));
                    mxGraph box = Graphs.get(NameGraphPos);
                    GraphsComponents.put(NameGraphPos, new mxGraphComponent(box));
                    logger.info("Создание JGraph, mxGraphComponent и JTable");

                    initSettingsGraph(Graphs.get(NameGraphPos), GraphsComponents.get(NameGraphPos));

                    localNameGraph = NameGraphPos;
                    graphicComBox.setSelectedItem(NameGraphPos);

                    GraphsComponents.get(NameGraphPos).refresh();
                    Graphs.get(NameGraphPos).refresh();
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "<html>Упссс... Похоже этот файл не содержит данные<br>о графе или данные представлены некорректно.<br>Пожалуйста выберите другой файл или отредактируйте этот!", "Не корректный файл", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
                }
            }
            else{
                Integer choice = JOptionPane.showConfirmDialog(this, "<html>Извините, но холст уже заполнен.<br>Добавление нового графа на этот холст<br>удалит тот, что находиться на нем сейчас.<br>Вы уверены, что хотите этого?", "Замена графа", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (choice == JOptionPane.YES_OPTION){
                    try {
                        importer.importGraph(jgrapht, fileToOpen);

                        JGraphXAdapter adapter = new JGraphXAdapter(jgrapht);
                        mxGraph graph = new mxGraph(adapter.getModel());

                        CreatorGraphs creator = new CreatorGraphs.Builder().graph(graph).build();

                        NameGraphPos = Name.toString();
                        Graphs.put(NameGraphPos, creator.getJGraph(creator.getGraphGUAVA(CreatorGraphs.Source.FROM_GRAPHICAL_VIEW)));
                        mxGraph box = Graphs.get(NameGraphPos);
                        GraphsComponents.put(NameGraphPos, new mxGraphComponent(box));
                        logger.info("Создание JGraph, mxGraphComponent и JTable");

                        initSettingsGraph(Graphs.get(NameGraphPos), GraphsComponents.get(NameGraphPos));

                        localNameGraph = NameGraphPos;
                        graphicComBox.setSelectedItem(NameGraphPos);

                        GraphsComponents.get(NameGraphPos).refresh();
                        Graphs.get(NameGraphPos).refresh();
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "<html>Упссс... Похоже этот файл не содержит данные<br>о графе или данные представлены некорректно.<br>Пожалуйста выберите другой файл или отредактируйте этот!", "Не корректный файл", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
                    }
                }
            }
        }
    }//GEN-LAST:event_openBtnActionPerformed

    //</editor-fold>

    //<editor-fold desc="Создание нового графа и переключение между графами">
    /**
     * Обработчик события клика по кнопке "Создать новый граф"
     * @param evt событие клика*/
    private void newGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGraphActionPerformed
        Object newNameGraph = "";
        try {
            newNameGraph = JOptionPane.showInputDialog(this, "Введите имя графа", "Создание нового графа", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/график-100.png")), null, "Не более 8 символов");
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (newNameGraph != null) {
            if (Graphs.size() == 0) {
                setPanelEnabled(true);

                stretchButton1.setEnabled(false);
                stretchButton2.setEnabled(false);
                stretchButton3.setEnabled(false);
                stretchButton4.setEnabled(false);

                UpdateBtn.setEnabled(false);
                addRibs.setEnabled(false);
                createBtn.setEnabled(false);
                jComboBox3.setEnabled(false);
                brightnessBtn.setSelected(true);
                jRadioButton4.setEnabled(false);
                jRadioButton7.setEnabled(false);
                jCheckBox1.setEnabled(false);
            }
            if (Graphs.containsKey(newNameGraph)) {
                JOptionPane.showMessageDialog(this, "<html>Извините, но граф с таким<br>именем уже существует!", "Обнаружены дубликаты", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(this.getClass().getResource("/icons8-ошибка-100.png")));
            }
            else {
                NameGraphPos = newNameGraph.toString();
                Graphs.put(NameGraphPos, new mxGraph());
                mxGraph box = Graphs.get(NameGraphPos);
                GraphsComponents.put(NameGraphPos, new mxGraphComponent(box));
                GraphsTables.put(NameGraphPos, initTable(new JTable(), NameGraphPos));

                initSettingsGraph(Graphs.get(NameGraphPos), GraphsComponents.get(NameGraphPos));

                for (JComboBox comBox : comboBoxes) {
                    comBox.addItem(NameGraphPos);
                }

                graphicComBox.setSelectedItem(NameGraphPos);

                namesGraph.add(NameGraphPos);

                graphsList1.setListData(namesGraph.toArray(new String[namesGraph.size()]));
                graphsList2.setListData(namesGraph.toArray(new String[namesGraph.size()]));

                UpdateBtn.setEnabled(false);
                createBtn.setEnabled(false);

                openBtn.setEnabled(true);
                saveBtn.setEnabled(true);
                saveAsBtn.setEnabled(true);
                stronglyRegularly.setEnabled(true);
                expImBtn.setEnabled(true);

                jScrollPane2.setViewportView(GraphsTables.get(NameGraphPos));
                graphComBox1.setSelectedItem(NameGraphPos);

                GraphsComponents.get(NameGraphPos).refresh();
                Graphs.get(NameGraphPos).refresh();
            }
        }
        logger.info("\nСоздание нового графа\n");
    }//GEN-LAST:event_newGraphActionPerformed
    /**
     * Обработчик события смены графа в выпадающем списке
     * @param evt событие клика*/
    private void graphicComBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphicComBoxActionPerformed
        JComboBox graphComBox = null;
        Color Black = new Color(58, 58, 58);
        Color White = new Color(242, 244, 244);

        if (evt.getSource() instanceof JComboBox) {
            try {
                graphComBox = (JComboBox) evt.getSource();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        String NameGraph = (String) graphComBox.getSelectedItem();
        workPanel0.removeAll();
        workPanel0.add(GraphsComponents.get(NameGraph), BorderLayout.CENTER);
        localNameGraph = NameGraph;

        for (JToggleButton myBtn : ToggleButtons) {
            myBtn.setSelected(false);
        }
        if (GraphsComponents.get(NameGraph).getViewport().getBackground().equals(Black)) {
            brightnessBtn.setSelected(false);
        }
        else if (GraphsComponents.get(NameGraph).getViewport().getBackground().equals(White)) {
            brightnessBtn.setSelected(true);
        }
        resizableBtn.setSelected(false);
        editableBtn.setSelected(false);
        if (getNumberPeaks(GraphsComponents.get(NameGraph).getGraph()).equals(0)) {
            counterID = 1;
        }
        else {
            counterID = getNumberPeaks(GraphsComponents.get(NameGraph).getGraph()) + 1;
        }
        GraphsComponents.get(NameGraph).refresh();
        Graphs.get(NameGraph).refresh();
    }//GEN-LAST:event_graphicComBoxActionPerformed

    //</editor-fold>

    //<editor-fold desc="Демонстрационные методы">
    public File open(File graphFile){
        return new File(graphFile.getName());
    }

    public int newGraph(){
        return 1;
    }

    public MutableGraph<String> createNewGraphs(File graphFile){
        return GraphBuilder.undirected().build();
    }

    public Boolean compareGraphs(MutableGraph<String> graph1, MutableGraph<String> graph2){
        return true;
    }

    public Boolean save(MutableGraph<String> graph){
        return true;
    }
    //</editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphInterface().setVisible(true);

            }
        });
    }

    //<editor-fold desc="Блок декларирования используемых компонентов">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CompareBtn;
    private javax.swing.JDialog CompareDialog;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JRadioButton IncMatRadBtn;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JButton RefreshBtn;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JToggleButton addPeakButton;
    private javax.swing.JToggleButton addRibButton;
    private javax.swing.JButton addRibs;
    private javax.swing.JButton addVertexes;
    private javax.swing.JRadioButton adjMatRadBtn;
    private javax.swing.JButton applySettingsBtn;
    private javax.swing.JButton applySettingsBtn2;
    private javax.swing.JToggleButton brightnessBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton chooseColorPeaks;
    private javax.swing.JButton chooseColorRibs;
    private javax.swing.JButton clearGraphBtn;
    private javax.swing.JLabel coordAnchorPoint;
    private javax.swing.JButton createBtn;
    private javax.swing.JButton createMFI;
    private javax.swing.JToggleButton dragButton;
    private javax.swing.JToggleButton editableBtn;
    private javax.swing.JMenuItem exitBtn;
    private javax.swing.JMenuItem expImBtn;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox<String> graphComBox1;
    private javax.swing.JComboBox<String> graphComBox2;
    private javax.swing.JComboBox<String> graphicComBox;
    private javax.swing.JList<String> graphsList1;
    private javax.swing.JList<String> graphsList2;
    private javax.swing.JSpinner gridSizeSpinner;
    private javax.swing.JToggleButton hideLabelsBtn;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JInternalFrame jInternalFrame3;
    private javax.swing.JInternalFrame jInternalFrame4;
    private javax.swing.JInternalFrame jInternalFrame5;
    private javax.swing.JInternalFrame jInternalFrame6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane2;
    protected javax.swing.JTextArea jTextArea4;
    protected javax.swing.JTextArea jTextArea5;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTable myTable;
    private javax.swing.JMenuItem newGraph;
    private javax.swing.JMenuItem openBtn;
    private javax.swing.JSpinner peakDiameterSpin;
    private javax.swing.JDialog processDialog;
    private javax.swing.JMenu propertiesMenu;
    private javax.swing.JButton questionBtn;
    private javax.swing.JToggleButton removeButton;
    private javax.swing.JToggleButton resizableBtn;
    private javax.swing.JMenuItem saveAsBtn;
    private javax.swing.JMenuItem saveBtn;
    private javax.swing.JButton selectGraph;
    private javax.swing.JLabel selectedColorPeaks;
    private javax.swing.JLabel selectedColorRibs;
    private javax.swing.JToggleButton setAnchorPointBtn;
    private javax.swing.JButton standardСolorBtn;
    private javax.swing.JButton stretchButton1;
    private javax.swing.JButton stretchButton2;
    private javax.swing.JButton stretchButton3;
    private javax.swing.JButton stretchButton4;
    private javax.swing.JMenuItem stronglyRegularly;
    private javax.swing.JPanel workPanel0;
    private javax.swing.JButton zoomLess;
    private javax.swing.JButton zoomMore;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
